{"version":3,"sources":["components/Wrapper.js","components/Screen.js","components/ButtonBox.js","components/Button.js","App.js","index.js"],"names":["Wrapper","children","className","Screen","value","mode","max","ButtonBox","Button","onClick","btnValues","toLocaleString","num","String","replace","removeSpaces","toString","App","useState","sign","res","calc","setCalc","numClickHandler","e","preventDefault","target","innerHTML","length","Number","commaClickHandler","includes","signClickHandler","equalsClickHandler","a","b","invertClickHandler","percentClickHandler","parseFloat","Math","pow","resetClickHandler","flat","map","btn","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a8dd75.chunk.js","sourcesContent":["import \"./Wrapper.css\";\n\nconst Wrapper = ({ children }) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Wrapper;","import { Textfit } from \"react-textfit\";\nimport \"./Screen.css\";\n\nconst Screen = ({ value }) => {\n  return (\n    \n    <Textfit className=\"screen\" mode=\"single\" max={70}>\n      {value}\n    </Textfit>\n  );\n};\n\nexport default Screen;","import \"./ButtonBox.css\";\n\nconst ButtonBox = ({ children }) => {\n  return <div className=\"buttonBox\">{children}</div>;\n};\n\nexport default ButtonBox;","import \"./Button.css\";\n\nconst Button = ({ className, value, onClick }) => {\n  return (\n    <button className={className} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Button;","import React, { useState } from \"react\";\n\nimport Wrapper from \"./components/Wrapper\";\nimport Screen from \"./components/Screen\";\nimport ButtonBox from \"./components/ButtonBox\";\nimport Button from \"./components/Button\";\n\n\nconst btnValues = [\n  [\"C\", \"+-\", \"%\", \"/\"],\n  [7, 8, 9, \"X\"],\n  [4, 5, 6, \"-\"],\n  [1, 2, 3, \"+\"],\n  [0, \".\", \"=\"],\n];\n\nconst toLocaleString = (num) =>\n  String(num).replace(/(?<!\\..*)(\\d)(?=(?:\\d{3})+(?:\\.|$))/g, \"$1 \");\n\nconst removeSpaces = (num) => num.toString().replace(/\\s/g, \"\");\n\nconst App = () => {\n\n  let [calc, setCalc] = useState({\n    sign: \"\",\n    num: 0,\n    res: 0,\n  });\n    \n  // numClickHandler function -The numClickHandler function gets triggered only if any of the number buttons (0–9) are pressed. \n  // Then it gets the value of the Button and adds that to the current num value.\n  const numClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    if (removeSpaces(calc.num).length < 16) {\n      setCalc({\n        ...calc,\n        num:\n          calc.num === 0 && value === \"0\"\n            ? \"0\"\n            : removeSpaces(calc.num) % 1 === 0\n            ? toLocaleString(Number(removeSpaces(calc.num + value)))\n            : toLocaleString(calc.num + value),\n        res: !calc.sign ? 0 : calc.res,\n      });\n    }\n  };\n\n  // numClickHandler function - adds the decimal point to the current num value, making it a decimal number.\n  const commaClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    setCalc({\n      ...calc,\n      num: !calc.num.toString().includes(\".\") ? calc.num + value : calc.num,\n    });\n  };\n\n  // commaClickHandler function - The signClickHandler function gets fired when the user press either +, –, * or /. \n  // The particular value is then set as a current sign value in the calc object.\n  const signClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    setCalc({\n      ...calc,\n      sign: value,\n      res: !calc.res && calc.num ? calc.num : calc.res,\n      num: 0,\n    });\n  };\n\n  // signClickHandler function - The equalsClickHandler function calculates the result when the equals button (=) is pressed. \n  // The calculation is based on the current num and res value, as well as the sign selected (see the math function).\n  const equalsClickHandler = () => {\n    if (calc.sign && calc.num) {\n      const math = (a, b, sign) =>\n        sign === \"+\"\n          ? a + b\n          : sign === \"-\"\n          ? a - b\n          : sign === \"X\"\n          ? a * b\n          : a / b;\n\n      setCalc({\n        ...calc,\n        res:\n          calc.num === \"0\" && calc.sign === \"/\"\n            ? \"Can't divide with 0\"\n            : toLocaleString(\n                math(\n                  Number(removeSpaces(calc.res)),\n                  Number(removeSpaces(calc.num)),\n                  calc.sign\n                )\n              ),\n        sign: \"\",\n        num: 0,\n      });\n    }\n  };\n\n  // equalsClickHandler function\n  // The invertClickHandler function first checks if there’s any entered value (num) or calculated value (res) and then inverts them by multiplying with -1:\n  const invertClickHandler = () => {\n    setCalc({\n      ...calc,\n      num: calc.num ? toLocaleString(removeSpaces(calc.num) * -1) : 0,\n      res: calc.res ? toLocaleString(removeSpaces(calc.res) * -1) : 0,\n      sign: \"\",\n    });\n  };\n\n  // invertClickHandler function - The percentClickHandler function checks if there’s any entered value (num) or calculated value (res) and \n  // then calculates the percentage using the built-in Math.pow function, which returns the base to the exponent power:\n  const percentClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let res = calc.res ? parseFloat(removeSpaces(calc.res)) : 0;\n\n    setCalc({\n      ...calc,\n      num: (num /= Math.pow(100, 1)),\n      res: (res /= Math.pow(100, 1)),\n      sign: \"\",\n    });\n  };\n\n  // percentClickHandler function - The resetClickHandler function defaults all the initial values of calc, returning \n  // the calc state as it was when the Calculator app was first rendered:\n  const resetClickHandler = () => {\n    setCalc({\n      ...calc,\n      sign: \"\",\n      num: 0,\n      res: 0,\n    });\n  };\n\n  return (\n    <Wrapper>\n      <div className=\"casio\">\n        <h3>CASIO</h3>\n        <p className=\"upper\">ELETRONIC CALCULATOR</p>\n        <p>HL-815L</p>\n      </div>\n      <Screen value={calc.num ? calc.num : calc.res} />\n      <ButtonBox>\n        {\n          // Flat() inserts all btn values inside a single array, map goes through them and returns a button with the required key, className, value and onClick properties\n          btnValues.flat().map((btn, i) => {\n            return (\n              <Button\n                key={i}\n                // Notice exception for the \"=\" operator to be a \"equals\" string\n                className={\n                    btn === \"C\" \n                  ? \"reset\"\n                  : btn === \"+-\" \n                  ? \"plusminus\"\n                  : btn === \"%\" \n                  ? \"percent\"\n                  : btn === \"/\" \n                  ? \"divide\"\n                  : btn === \"X\" \n                  ? \"multiply\"\n                  : btn === \"-\" \n                  ? \"minus\"\n                  : btn === \"+\" \n                  ? \"plus\"\n                  : btn === \"=\" \n                  ? \"equals\" \n                  : btn === \".\" \n                  ? \"decimal\"\n                  : \"\" \n                }\n                value={btn}\n                onClick={\n                    btn === \"C\"\n                    ? resetClickHandler\n                    : btn === \"+-\"\n                    ? invertClickHandler\n                    : btn === \"%\"\n                    ? percentClickHandler\n                    : btn === \"=\"\n                    ? equalsClickHandler\n                    : btn === \"/\" || btn === \"X\" || btn === \"-\" || btn === \"+\"\n                    ? signClickHandler\n                    : btn === \".\"\n                    ? commaClickHandler\n                    : numClickHandler\n                }\n              />\n            );\n          })\n        }\n      </ButtonBox>\n    </Wrapper>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MetaTags from 'react-meta-tags';\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MetaTags>\n      <title>Calculator</title>\n    </MetaTags>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}